from scipy.optimize import brentq
from bsm_model import BlackScholesModel

def implied_volatility(target_price, market_env, option_type='call', tol=1e-6, max_iter=100):
    """
    Computes the implied volatility using Brent's method.

    Parameters:
    - target_price: Observed market price of the option
    - market_env: MarketEnvironment object with option parameters
    - option_type: 'call' or 'put'
    - tol: Tolerance level for root-finding
    - max_iter: Maximum iterations for Brent's method

    Returns:
    - Implied volatility (float)
    """

    def objective_function(vol):
        model = BlackScholesModel(
            market_env.spot,
            market_env.strike,
            market_env.maturity,
            market_env.rate,
            vol,
            market_env.dividend_yield
        )
        model_price = model.call_price() if option_type == 'call' else model.put_price()
        return model_price - target_price

    try:
        iv = brentq(objective_function, 1e-6, 3.0, xtol=tol, maxiter=max_iter)
        return iv
    except Exception as e:
        print(f"⚠️ Failed to compute implied volatility: {e}")
        return None
